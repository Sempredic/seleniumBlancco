/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seleniumblancco;

import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

/**
 *
 * @author Vince
 */
public class seleniumFrame extends javax.swing.JFrame {

    /**
     * Creates new form seleniumFrame
     */
    KeyboardFocusManager manager;
    ArrayList<String> serialListArray;
    templateMgrFrame mgrFrame;
    LinkedHashMap<Object,LinkedHashMap<Object,Object>> serialObjects;
    DefaultListModel<deviceObject> listModel;
    LinkedHashMap<Object,ArrayList> errorObjects;
    ChromeOptions chromeOptions;
    optionsFrame oFrame;
    WebDriver driver;
    ArrayList<String> newTab;
    LinkedHashMap<String,ArrayList> newMap;
    ArrayList<WebElement> el;
    ArrayList elements;
    LinkedHashMap<Object,Object> temp;
    
    public seleniumFrame() {
        listModel = new DefaultListModel<>();
        initComponents();
        serialListArray = new ArrayList<String>();
        mgrFrame = new templateMgrFrame();
        serialObjects = new LinkedHashMap<Object,LinkedHashMap<Object,Object>>();
        serialLists.setCellRenderer(new listRenderer());
        errorObjects = new LinkedHashMap<Object,ArrayList>();
        chromeOptions = new ChromeOptions();
        chromeOptions.addArguments("--headless");
        oFrame = new optionsFrame();
        el = new ArrayList<WebElement>();
        elements = new ArrayList();
        temp = new LinkedHashMap<Object,Object>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        caseField = new javax.swing.JTextField();
        serialNumberField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        serialLists = new javax.swing.JList<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        serialDataArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        errorTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        editTempMgrItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        preferencesMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        caseField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        caseField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                caseFieldKeyPressed(evt);
            }
        });

        serialNumberField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        serialNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNumberFieldActionPerformed(evt);
            }
        });
        serialNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                serialNumberFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(caseField)
                    .addComponent(serialNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(caseField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(serialNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        serialLists.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        serialLists.setModel(listModel);
        serialLists.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                serialListsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(serialLists);

        serialDataArea.setColumns(20);
        serialDataArea.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        serialDataArea.setRows(5);
        jScrollPane1.setViewportView(serialDataArea);

        jTabbedPane1.addTab("Reports", jScrollPane1);

        errorTextArea.setColumns(20);
        errorTextArea.setRows(5);
        jScrollPane3.setViewportView(errorTextArea);

        jTabbedPane1.addTab("Errors", jScrollPane3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );

        jMenu1.setText("File");

        editTempMgrItem.setText("Edit Template Mgr");
        editTempMgrItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTempMgrItemActionPerformed(evt);
            }
        });
        jMenu1.add(editTempMgrItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        preferencesMenuItem.setText("Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(preferencesMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void caseFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_caseFieldKeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        if(keyCode == KeyEvent.VK_ENTER){
            
            manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
            manager.focusNextComponent();
        }
            
    }//GEN-LAST:event_caseFieldKeyPressed

    private void serialNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNumberFieldActionPerformed

    private void serialNumberFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialNumberFieldKeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        if(keyCode == KeyEvent.VK_ENTER){
            
            if(serialNumberField.getText().trim().toUpperCase().equals("VALIDATE")){
                if(!oFrame.getOReportOptionState()){
                    runSelenium();
                }else{
                    runSeleniumReportsOnly();
                }
                System.out.println("Validate!");
                serialNumberField.setText("");
            }else if(!serialListArray.contains(serialNumberField.getText())){
                if(serialNumberField.getText().length()>0){
                    serialListArray.add(serialNumberField.getText());
                    listModel.addElement(new deviceObject(serialNumberField.getText()));
                    serialNumberField.setText("");
                }
                
            }
        }
    }//GEN-LAST:event_serialNumberFieldKeyPressed

    private void editTempMgrItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTempMgrItemActionPerformed
        // TODO add your handling code here:
        mgrFrame.setVisible(true);
    }//GEN-LAST:event_editTempMgrItemActionPerformed

    private void serialListsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serialListsValueChanged
        // TODO add your handling code here:
        String selectedSerial = serialLists.getSelectedValue().getName();
        deviceObject device = serialLists.getSelectedValue();
        StringBuilder builder = new StringBuilder();
        StringBuilder errorBuilder = new StringBuilder();
        
        serialDataArea.setText("");
        
        if(!device.getElementMap().isEmpty()){
            for(Map.Entry<Object,LinkedHashMap<Object,Object>> item:device.getElementMap().entrySet()){
                if(item.getKey().equals("BD")){
                    builder.append("BD REPORT \n");
                    builder.append("\n");
                    for(Object crit:item.getValue().entrySet()){
                        builder.append(crit+"\n");
                    }
                    builder.append("\n");
                }else if(item.getKey().equals("ER")){
                    builder.append("ERASURE REPORT \n");
                    builder.append("\n");
                    for(Object crit:item.getValue().entrySet()){
                        builder.append(crit+"\n");
                    }
                    builder.append("\n");
                }else if(item.getKey().equals("FR")){
                    builder.append("FACTORY REPORT \n");
                    builder.append("\n");
                    for(Object crit:item.getValue().entrySet()){
                        builder.append(crit+"\n");
                    }
                    builder.append("\n");
                }
            }
            serialDataArea.setText(builder.toString());
        }else{
            serialDataArea.setText("--NO REPORTS--");
        }
        
        if(!device.getErrorElementMap().isEmpty()){
            for(Object error:device.getErrorElementMap().get(device.getName())){
                errorBuilder.append(error+"\n");
            }
            errorTextArea.setText(errorBuilder.toString());
        }else{
            errorTextArea.setText("--NO ERRORS--");
        }

    }//GEN-LAST:event_serialListsValueChanged

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
        // TODO add your handling code here:
        oFrame.setVisible(true);
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void runSeleniumReportsOnly(){
        
        driver = new ChromeDriver(chromeOptions);
        
        driver.manage().timeouts().implicitlyWait(15,TimeUnit.SECONDS);
        
        driver.get("https://cloud.blancco.com/login");
        
        driver.findElement(By.id("login_usernameInput")).sendKeys("PreOwned");
        driver.findElement(By.id("login_passwordInput")).sendKeys("Welcome123!");
        driver.findElement(By.id("login_passwordInput")).sendKeys(Keys.RETURN);
        
        // get original current tab and store it
        String oldTab = driver.getWindowHandle();

        try{
            
            for(Object serials:serialListArray){
                
                System.out.println("Input Started");
                
                driver.findElement(By.id("reporting_processArea_customView_PreOwnedTech")).click();
                driver.findElement(By.id("reportFiltering_searchInput")).clear();
                driver.findElement(By.id("reportFiltering_searchInput")).sendKeys((String)serials);
                sleep(1000);
                driver.findElement(By.id("reportFiltering_searchInput")).sendKeys(Keys.RETURN);
                
                sleep(3000);
                
                System.out.println("View Started");
             
                if(driver.findElement(By.xpath("//*[@id=\"reporting_reportingPagination_reportCount\"]")).getText().trim().equals("0 reports")){
                    continue;
                }
                
                if(driver.findElement(By.xpath("//*[@id=\"reporting_reportingPagination_reportCount\"]")).getText().trim().equals("1 reports")){
                    driver.findElement(By.xpath("//*[@id=\"reporting_table\"]/div[3]/div/div[2]/div/div/table/tbody/tr[1]/td[2]/div/div/a[1]")).click();
                }else{
                    driver.findElement(By.xpath("//*[@id=\"reporting_table\"]/div[3]/div/div[2]/div/div/table/tbody/tr[1]/td[2]/div/div/a[1]")).click();
                    driver.findElement(By.xpath("//*[@id=\"reporting_table\"]/div[3]/div/div[2]/div/div/table/tbody/tr[2]/td[2]/div/div/a[1]")).click();
                }
                
                sleep(1000);

                newTab = new ArrayList<String>(driver.getWindowHandles());
                newTab.remove(oldTab);
                // loop focus through new tabs and scrape data from each one
                for(String tabs:newTab){
                    
                    driver.switchTo().window(tabs);
                    
                    if(driver.findElement(By.xpath("/html/body/div/div[2]/div[1]/h1")).getText().trim().equals(
                            "Hardware Report")){
                        
                        temp = new LinkedHashMap<Object,Object>();
                        
                        if(driver.findElements(By.xpath("//*[contains(text(), '"+serials+"')]")).size()>0){
                            temp.put("Serial:", serials);
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("BD", temp);
                                    break;
                                }
                            }  
                        }
                        
                        
                    }else if(driver.findElement(By.xpath("/html/body/div/div[2]/div[1]/h1")).getText().trim().equals(
                            "Data Erasure Report")){
                        
                        temp = new LinkedHashMap<Object,Object>();
                        
                        if(driver.findElements(By.xpath("//*[contains(text(), '"+serials+"')]")).size()>0){
                            temp.put("Serial:", serials);
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("ER", temp);
                                    break;
                                }
                            }  
                        }
                        
                        if(driver.findElements(By.xpath("//*[contains(text(), 'Erased')]")).size()>0){
                            temp.put("Status:", "Erased");
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("ER", temp);
                                    break;
                                }
                            }
                        }else{
                            temp.put("Status:", "Failed");
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("ER", temp);
                                    break;
                                }
                            }
                        }
                        
                    }else if(driver.findElement(By.xpath("/html/body/div/div[2]/div[1]/h1")).getText().trim().equals(
                            "Factory Reset Report")){
                        
                        temp = new LinkedHashMap<Object,Object>();
                        
                        if(driver.findElements(By.xpath("//*[contains(text(), '"+serials+"')]")).size()>0){
                            temp.put("Serial:", serials);
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("FR", temp);
                                    break;
                                }
                            }  
                        }
                        
                        if(driver.findElements(By.xpath("//*[contains(text(), 'Erased')]")).size()>0){
                            temp.put("Status:", "Erased");
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("ER", temp);
                                    break;
                                }
                            }
                        }else{
                            temp.put("Status:", "Not Erased");
                            for(int i=0;i<listModel.getSize();i++){                          
                                deviceObject current = listModel.getElementAt(i);
                                if(current.getName().equals(temp.get("Serial:"))){
                                    current.getElementMap().put("ER", temp);
                                    break;
                                }
                            }
                        }
                    }
                    
                    driver.close();
                }
                // change focus back to old tab
                driver.switchTo().window(oldTab);
            }
  
        }catch(Exception e){
            System.out.println(e.toString());
        }
        
        System.out.println("RO-SUCCESS!!!!");
        
        driver.quit();
        
        validateSerialObjects();
        
    }
    private void runSelenium(){
         
        driver = new ChromeDriver(chromeOptions);
        
        driver.manage().timeouts().implicitlyWait(15,TimeUnit.SECONDS);
        
        driver.get("https://cloud.blancco.com/login");
        
        driver.findElement(By.id("login_usernameInput")).sendKeys("PreOwned");
        driver.findElement(By.id("login_passwordInput")).sendKeys("Welcome123!");
        driver.findElement(By.id("login_passwordInput")).sendKeys(Keys.RETURN);
        
        // get original current tab and store it
        String oldTab = driver.getWindowHandle();

        try{
            
            for(Object serials:serialListArray){
                
                System.out.println("Input Started");
                
                driver.findElement(By.id("reporting_processArea_customView_PreOwnedTech")).click();
                driver.findElement(By.id("reportFiltering_searchInput")).clear();
                driver.findElement(By.id("reportFiltering_searchInput")).sendKeys((String)serials);
                sleep(1000);
                driver.findElement(By.id("reportFiltering_searchInput")).sendKeys(Keys.RETURN);
                
                sleep(3000);
                
                System.out.println("View Started");
             
                if(driver.findElement(By.xpath("//*[@id=\"reporting_reportingPagination_reportCount\"]")).getText().trim().equals("0 reports")){
                    continue;
                }
                
                if(driver.findElement(By.xpath("//*[@id=\"reporting_reportingPagination_reportCount\"]")).getText().trim().equals("1 reports")){
                    driver.findElement(By.xpath("//*[@id=\"reporting_table\"]/div[3]/div/div[2]/div/div/table/tbody/tr[1]/td[2]/div/div/a[1]")).click();
                }else{
                    driver.findElement(By.xpath("//*[@id=\"reporting_table\"]/div[3]/div/div[2]/div/div/table/tbody/tr[1]/td[2]/div/div/a[1]")).click();
                    driver.findElement(By.xpath("//*[@id=\"reporting_table\"]/div[3]/div/div[2]/div/div/table/tbody/tr[2]/td[2]/div/div/a[1]")).click();
                }
                
                sleep(1000);

                newTab = new ArrayList<String>(driver.getWindowHandles());
                newTab.remove(oldTab);
                // loop focus through new tabs and scrape data from each one
                for(String tabs:newTab){
                    
                    driver.switchTo().window(tabs);
                    
                    elements.clear();
                    el.clear();
                    
                    el = (ArrayList)driver.findElements(By.cssSelector("*"));
 
                    for(WebElement e:el){
                        elements.add(e.getText());
                    }
 
                    if(driver.findElement(By.xpath("/html/body/div/div[2]/div[1]/h1")).getText().trim().equals("Hardware Report")){
                        temp = new LinkedHashMap<Object,Object>();

                        for(Object item:oFrame.getFieldsListArray()){
                            if(elements.contains(item)){
                                if(elements.get(elements.indexOf(item)).equals("Serial:")){
                                     if(elements.get(elements.indexOf(item)+1).equals(serials)){
                                            if(!temp.containsKey(elements.get(elements.indexOf(item)))){
                                                temp.put(elements.get(elements.indexOf(item)),elements.get(elements.indexOf(item)+1));
                                            }
                                        }
                                    }else{
                                        if(!temp.containsKey(elements.get(elements.indexOf(item)))){
                                            temp.put(elements.get(elements.indexOf(item)),elements.get(elements.indexOf(item)+1));
                                        }
                                    }
                            }
                        }
                        
                        for(int i=0;i<listModel.getSize();i++){                          
                            deviceObject current = listModel.getElementAt(i);
                            if(current.getName().equals(temp.get("Serial:"))){
                                current.getElementMap().put("BD", temp);
                                break;
                            }
                        }

                    }else if(driver.findElement(By.xpath("/html/body/div/div[2]/div[1]/h1")).getText().trim().equals("Data Erasure Report")){
                        temp = new LinkedHashMap<Object,Object>();
                        
                        for(Object item:oFrame.getERFieldsListArray()){
                            if(elements.contains(item)){
                                if(elements.get(elements.indexOf(item)).equals("Serial:")){
                                    temp.put(elements.get(elements.indexOf(item)),serials);   
                                }else{
                                    if(!temp.containsKey(elements.get(elements.indexOf(item)))){
                                        temp.put(elements.get(elements.indexOf(item)),elements.get(elements.indexOf(item)+1));
                                    }
                                }
                            }
                        }
                        
                        System.out.println(temp);
                        
                        for(int i=0;i<listModel.getSize();i++){                          
                            deviceObject current = listModel.getElementAt(i);
                            if(current.getName().equals(temp.get("Serial:"))){
                                current.getElementMap().put("ER", temp);
                                break;
                            }
                        }

                    }else if(driver.findElement(By.xpath("/html/body/div/div[2]/div[1]/h1")).getText().trim().equals("Factory Reset Report")){
                        temp = new LinkedHashMap<Object,Object>();
                        
                        for(Object item:oFrame.getFRFieldsListArray()){
                            if(elements.contains(item)){
                                if(elements.get(elements.indexOf(item)).equals("Serial:")){
                                    temp.put(elements.get(elements.indexOf(item)),serials);   
                                }else{
                                    if(!temp.containsKey(elements.get(elements.indexOf(item)))){
                                        temp.put(elements.get(elements.indexOf(item)),elements.get(elements.indexOf(item)+1));
                                    }
                                }
                            }
                        }
                        
                        //System.out.println(temp);
                        
                        for(int i=0;i<listModel.getSize();i++){                          
                            deviceObject current = listModel.getElementAt(i);
                            if(current.getName().equals(temp.get("Serial:"))){
                                current.getElementMap().put("FR", temp);
                                break;
                            }
                        }
                    }

                    driver.close();
                }

                // change focus back to old tab
                driver.switchTo().window(oldTab);
                
            }
         
        }catch(Exception e){
            System.out.println(e.toString());
        }
        
        
        
        System.out.println("SUCCESS!!!!");
        
        driver.quit();
        
        validateSerialObjects();
    }

    private void validateSerialObjects(){
        
        String deviceName = null;
        String reportType = null;
         
            
        for(int i=0;i<listModel.getSize();i++){        
            
            deviceObject current = listModel.getElementAt(i);
            ArrayList<String> reportTypes = new ArrayList();
            
            if(!current.getElementMap().isEmpty()){
                if(current.getElementMap().containsKey("BD")){
                    reportType = "BD";
                    reportTypes.add("BD");
                }
                if(current.getElementMap().containsKey("ER")){
                    reportType = "ER";
                    reportTypes.add("ER");
                }
                if(current.getElementMap().containsKey("FR")){
                    reportType = "FR";
                    reportTypes.add("ER");
                }

                deviceName = (String)current.getElementMap().get(reportType).get("Model:");
                
                if(mgrFrame.getTemplateMap().containsKey(deviceName)){
                    
                    for(Map.Entry<String,String> crit:mgrFrame.getTemplateMap().get(deviceName).getCriteria().entrySet()){
                        if(oFrame.getEROptionState()){
                            for(String type:reportTypes){
                               if(current.getElementMap().get(type).containsKey(crit.getKey()+":")){
                                    if(current.getElementMap().get(type).get(crit.getKey()+":").equals(crit.getValue().trim())){
                                        if(current.getMatchBoolean()){
                                            current.setMatchBoolean(true);
                                        }

                                    }else{
                                        current.setMatchBoolean(false);
                                        if(!current.getErrorElementMap().containsKey(current.getName())){
                                            ArrayList temp = new ArrayList();
                                            temp.add(crit.getKey()+" "+crit.getValue());
                                            current.getErrorElementMap().put(current.getName(),temp); 
                                        }else{
                                            if(!current.getErrorElementMap().get(current.getName()).contains(crit.getKey())){
                                                current.getErrorElementMap().get(current.getName()).add(crit.getKey()+" "+crit.getValue());
                                            }
                                        } 
                                    } 
                                }else{
                                    System.out.println(crit.getKey()+"- Criteria Is Incorrect");
                                } 
                            }
                            
                        } ///DONT FORGET TO ADD THE ELSE HERE !!!!!!!  
                    }
                }
            }else{
                current.setMatchBoolean(false);
                
            }
            
            if(!reportTypes.contains("ER")){
                current.setMatchBoolean(false);
                if(!current.getErrorElementMap().containsKey(current.getName())){
                    ArrayList temp = new ArrayList();
                    temp.add("NO ERASURE REPORT/MISSING");
                    current.getErrorElementMap().put(current.getName(),temp); 
                }else{
                    if(!current.getErrorElementMap().get(current.getName()).contains("NO ERASURE REPORT/MISSING")){
                        current.getErrorElementMap().get(current.getName()).add("NO ERASURE REPORT/MISSING");
                    }
                }
                
            }else if(!reportTypes.contains("BD")){
                current.setMatchBoolean(false);
                if(!current.getErrorElementMap().containsKey(current.getName())){
                    ArrayList temp = new ArrayList();
                    temp.add("NO BLANCCO DIAGNOSTIC REPORT/MISSING");
                    current.getErrorElementMap().put(current.getName(),temp); 
                }else{
                    if(!current.getErrorElementMap().get(current.getName()).contains("NO BLANCCO DIAGNOSTIC REPORT/MISSING")){
                        current.getErrorElementMap().get(current.getName()).add("NO BLANCCO DIAGNOSTIC REPORT/MISSING");
                    }
                }
            }
        }        
        
        serialLists.repaint();
        JOptionPane.showConfirmDialog(this,"            Complete!","Confirm",JOptionPane.DEFAULT_OPTION);
    }


    public void run(){
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new seleniumFrame().setVisible(true);
            }
        });
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(seleniumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(seleniumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(seleniumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(seleniumFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField caseField;
    private javax.swing.JMenuItem editTempMgrItem;
    private javax.swing.JTextArea errorTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JTextArea serialDataArea;
    private javax.swing.JList<deviceObject> serialLists;
    private javax.swing.JTextField serialNumberField;
    // End of variables declaration//GEN-END:variables
}
