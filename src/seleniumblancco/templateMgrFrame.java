/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seleniumblancco;

import java.io.File;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Vince
 */
public class templateMgrFrame extends javax.swing.JFrame {

    /**
     * Creates new form templateMgrFrame
     */
    LinkedHashMap<String,deviceTemplate> templateMap;
    ArrayList<String> existingTemplateArray;
    ArrayList<String> criteriaTypes;
    ArrayList<String> assCriteriaListArray;

    public templateMgrFrame() {
        
        templateMap = new LinkedHashMap<String,deviceTemplate>();
        existingTemplateArray = new ArrayList<String>();
        criteriaTypes = new ArrayList<String>();
        assCriteriaListArray = new ArrayList<String>();
        
        initComponents();
        initExistingTemplatesList();
        updateExistingTemplatesList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        assTempNameField = new javax.swing.JTextField();
        assignedCriteriaLabel = new javax.swing.JLabel();
        assCriteriaDelButton = new javax.swing.JButton();
        assCriteriaAddButton = new javax.swing.JButton();
        areaTempLabel = new javax.swing.JLabel();
        assignedCriteriaList = new java.awt.List();
        jPanel4 = new javax.swing.JPanel();
        createTempButton = new javax.swing.JButton();
        existingTempList = new java.awt.List();
        existingListLabel = new javax.swing.JLabel();
        deleteTempButton = new javax.swing.JButton();
        editTempButton = new javax.swing.JButton();
        editApplyButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        assTempNameField.setEditable(false);
        assTempNameField.setEnabled(false);

        assignedCriteriaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        assignedCriteriaLabel.setText("Assigned Criteria");
        assignedCriteriaLabel.setEnabled(false);

        assCriteriaDelButton.setText("Del");
        assCriteriaDelButton.setEnabled(false);
        assCriteriaDelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assCriteriaDelButtonActionPerformed(evt);
            }
        });

        assCriteriaAddButton.setText("Add");
        assCriteriaAddButton.setEnabled(false);
        assCriteriaAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assCriteriaAddButtonActionPerformed(evt);
            }
        });

        areaTempLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        areaTempLabel.setText("Template Name");
        areaTempLabel.setEnabled(false);

        assignedCriteriaList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        assignedCriteriaList.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assignedCriteriaList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(areaTempLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(assignedCriteriaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(assTempNameField)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(assCriteriaAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(assCriteriaDelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(areaTempLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assTempNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assignedCriteriaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(assignedCriteriaList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assCriteriaAddButton)
                    .addComponent(assCriteriaDelButton))
                .addContainerGap())
        );

        assTempNameField.setEnabled(false);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        createTempButton.setText("Create New Template");
        createTempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTempButtonActionPerformed(evt);
            }
        });

        existingTempList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        existingTempList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                existingTempListMouseClicked(evt);
            }
        });
        existingTempList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                existingTempListItemStateChanged(evt);
            }
        });
        existingTempList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                existingTempListFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                existingTempListFocusLost(evt);
            }
        });

        existingListLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        existingListLabel.setForeground(new java.awt.Color(255, 255, 255));
        existingListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        existingListLabel.setText("Existing Templates");

        deleteTempButton.setText("Remove Template");
        deleteTempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTempButtonActionPerformed(evt);
            }
        });

        editTempButton.setText("Edit Template");
        editTempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTempButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(existingListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(existingTempList, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editTempButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteTempButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createTempButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(existingListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(createTempButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editTempButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteTempButton)
                        .addGap(222, 314, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(existingTempList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        editApplyButton.setText("Apply");
        editApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editApplyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(editApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editApplyButton)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public LinkedHashMap<String,deviceTemplate> getTemplateMap(){
        return templateMap;
    }
    
    private void assCriteriaDelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assCriteriaDelButtonActionPerformed
        // TODO add your handling code here:
        

        if(assignedCriteriaList.getSelectedItems().length>0){
            
            String criteriaName = assignedCriteriaList.getSelectedItem().split(":")[0];
            String templateName = existingTempList.getSelectedItem();
            
            if(criteriaName != null){
                if(templateMap.get(templateName).getCriteria().containsKey(criteriaName)){
                    if(JOptionPane.showConfirmDialog(this,"Delete Criteria From " + templateName + " ?", "Exiting",
                        JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION){

                    templateMap.get(templateName).removeDeviceType(criteriaName);
                }
            }else if(assCriteriaListArray.contains(criteriaName)){
                if(JOptionPane.showConfirmDialog(this,"Delete Criteria From " + templateName + " ?", "Exiting",
                    JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION){

                assCriteriaListArray.remove(criteriaName);
            }
            }

            updateAssignedCriteriaList(templateMap.get(templateName));
            updateAssignedCriteriaList();

            } 
        }
        
    }//GEN-LAST:event_assCriteriaDelButtonActionPerformed

    private void assCriteriaAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assCriteriaAddButtonActionPerformed
        // TODO add your handling code here:

//        Object[] options = DatabaseObj.getDevicesList().toArray();
//
        String criteriaName = (String)JOptionPane.showInputDialog(
            this,
            new JLabel("Enter Criteria", SwingConstants.CENTER),
            "Add Criteria",
            JOptionPane.PLAIN_MESSAGE);

        if(criteriaName != null){

            if(templateMap.containsKey(existingTempList.getSelectedItem())){
                if(!templateMap.get(existingTempList.getSelectedItem()).getCriteria().containsKey(criteriaName)){
                    if(!assCriteriaListArray.contains(criteriaName)){
                        assCriteriaListArray.add(criteriaName);
                    }else{
                        JOptionPane.showMessageDialog(this,"Device Already Exists","Try Again", JOptionPane.WARNING_MESSAGE);
                    }

                }else{
                    JOptionPane.showMessageDialog(this,"Device Already Exists","Try Again", JOptionPane.WARNING_MESSAGE);
                }

                updateAssignedCriteriaList(templateMap.get(existingTempList.getSelectedItem()));
                updateAssignedCriteriaList();
            }
        }
    }//GEN-LAST:event_assCriteriaAddButtonActionPerformed

    private void createTempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTempButtonActionPerformed
        // TODO add your handling code here:

        String template = (String)JOptionPane.showInputDialog(
            this,
            new JLabel("Enter Template Name for Device", SwingConstants.CENTER),
            "Add Template",
            JOptionPane.PLAIN_MESSAGE);

        if(template != null){
            if(!templateMap.containsKey(template)){
                deviceTemplate newTemp = new deviceTemplate(template);

                templateMap.put(template, newTemp);

                existingTemplateArray.add(template);

                updateExistingTemplatesList();
            }else{
                JOptionPane.showMessageDialog(this,"Template Already Exists","Try Again", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_createTempButtonActionPerformed

    private void existingTempListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingTempListMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_existingTempListMouseClicked

    private void existingTempListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_existingTempListItemStateChanged
        // TODO add your handling code here:
        if(existingTempList.getSelectedItem() != null){

            //update current template name
            
            if(templateMap.get(existingTempList.getSelectedItem()).getDeviceName().length()<=28){
                assTempNameField.setText(templateMap.get(existingTempList.getSelectedItem()).getDeviceName());
            }else{
                String subString = templateMap.get(existingTempList.getSelectedItem()).getDeviceName().substring(0,26);
                assTempNameField.setText(subString);
            }
            

            //update current template devices list
            updateAssignedCriteriaList(templateMap.get(existingTempList.getSelectedItem()));

        }else{
            assTempNameField.setText(" ");
            assignedCriteriaList.removeAll();
        }
    }//GEN-LAST:event_existingTempListItemStateChanged

    private void existingTempListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_existingTempListFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_existingTempListFocusGained

    private void existingTempListFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_existingTempListFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_existingTempListFocusLost

    private void deleteTempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTempButtonActionPerformed
        // TODO add your handling code here:

        int option = JOptionPane.showConfirmDialog(this,"Are You Sure?", "Deleting Template",
            JOptionPane.YES_NO_CANCEL_OPTION);

        if(option==JOptionPane.YES_OPTION){
            if(templateMap.containsKey(existingTempList.getSelectedItem())){
                templateMap.remove(existingTempList.getSelectedItem());
                existingTemplateArray.remove(existingTempList.getSelectedItem());
            }

            assTempNameField.setText(" ");
            assignedCriteriaList.removeAll();

            updateExistingTemplatesList();
            writeTemplatesToFile();
        }

    }//GEN-LAST:event_deleteTempButtonActionPerformed

    private void editTempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTempButtonActionPerformed
        // TODO add your handling code here:
        assCriteriaListArray.clear();

        if(!assignedCriteriaList.isEnabled()){
            if(existingTempList.getSelectedItem()!=null){

                editApplyButton.setEnabled(true);
                assTempNameField.setEnabled(true);
                assignedCriteriaList.setEnabled(true);
                assCriteriaAddButton.setEnabled(true);
                assCriteriaDelButton.setEnabled(true);
                areaTempLabel.setEnabled(true);
                assignedCriteriaLabel.setEnabled(true);

                createTempButton.setEnabled(false);
                deleteTempButton.setEnabled(false);
                existingTempList.setEnabled(false);
                existingListLabel.setEnabled(false);

                editTempButton.setText("Cancel Edit");

            }else{
                JOptionPane.showMessageDialog(this,"Select an Existing Template","Try Again", JOptionPane.WARNING_MESSAGE);
            }
        }else{
            updateAssignedCriteriaList(templateMap.get(existingTempList.getSelectedItem()));

            editApplyButton.setEnabled(false);
            assTempNameField.setEnabled(false);
            assignedCriteriaList.setEnabled(false);
            assCriteriaAddButton.setEnabled(false);
            assCriteriaDelButton.setEnabled(false);

            areaTempLabel.setEnabled(false);
            assignedCriteriaLabel.setEnabled(false);
            createTempButton.setEnabled(true);
            deleteTempButton.setEnabled(true);
            existingTempList.setEnabled(true);
            existingListLabel.setEnabled(true);

            editTempButton.setText("Edit Template");
        }

    }//GEN-LAST:event_editTempButtonActionPerformed

    private void editApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editApplyButtonActionPerformed
        // TODO add your handling code here:
        commitAssCriteriaList();
//
        //editApplyButton.setEnabled(false);
        assTempNameField.setEnabled(false);
        assignedCriteriaList.setEnabled(false);
        assCriteriaAddButton.setEnabled(false);
        assCriteriaDelButton.setEnabled(false);

        areaTempLabel.setEnabled(false);
        assignedCriteriaLabel.setEnabled(false);
        createTempButton.setEnabled(true);
        deleteTempButton.setEnabled(true);
        existingTempList.setEnabled(true);
        existingListLabel.setEnabled(true);

        editTempButton.setText("Edit Template");

        writeTemplatesToFile();

    }//GEN-LAST:event_editApplyButtonActionPerformed

    private void initExistingTemplatesList(){
        
        int numTemplates=0;
        int counter = 0;
        String templateName = " ";
        String criteria = " ";
        ArrayList<String> list = new ArrayList<String>();
        
        try{
            
            File tmpDir = new File("templates.txt");

            boolean exists = tmpDir.exists();  
            
            if(exists == false){
                tmpDir.createNewFile();
            }
            
            list = (ArrayList)Files.readAllLines(Paths.get(tmpDir.getAbsolutePath()));
            
            if(isInteger(list.get(0))){
                numTemplates = Integer.parseInt(list.remove(0));
            }

            for(int i=0;i<numTemplates;i++){
                
                deviceTemplate newTemplate = new deviceTemplate();
                
                int lines = Integer.parseInt(list.get(counter));
                
                counter++;
                
                for(int j=0;j<lines;j++){
                    if(j==0){
                        newTemplate.updateTemplateName(list.get(counter));
                    }else{   
                        String[] crit = list.get(counter).split(":");
                        newTemplate.addCriteriaType(crit[0], crit[1]);
                    }
                         
                    counter++;
                }   
                templateMap.put(newTemplate.getDeviceName(), newTemplate);
                existingTemplateArray.add(newTemplate.getDeviceName());
            }
            
        }catch(Exception e){
            System.out.println("error");
        }
    }
    
    void updateAssignedCriteriaList(deviceTemplate temp){
        
        assignedCriteriaList.removeAll();
        
        for(Map.Entry<String,String> crit:temp.getCriteria().entrySet()){
            assignedCriteriaList.add(crit.getKey()+":"+crit.getValue());
        }
              
    }
    
    void updateAssignedCriteriaList(){

        for(String criteria:assCriteriaListArray){
            assignedCriteriaList.add(criteria);
        }
              
    }
    
    void commitAssCriteriaList(){

        for(String criteria:assCriteriaListArray){
            String[] crit = criteria.split(":");
            templateMap.get(existingTempList.getSelectedItem()).addCriteriaType(crit[0], crit[1]);
        }
        
        assCriteriaListArray.clear();
    
    }
    
    private void updateExistingTemplatesList(){
       
        existingTempList.removeAll();
        
        for(String value:existingTemplateArray){
            
            existingTempList.add(value);        
        }
            
    }
    
    private void writeTemplatesToFile(){
        
        try{
            
            PrintWriter writer = new PrintWriter("templates.txt", "UTF-8");
            
            writer.println(templateMap.size());

            for(Map.Entry<String,deviceTemplate> templates:templateMap.entrySet()){
                
                //get number of lines to write
                writer.println(templates.getValue().getCriteria().size()+1);
                writer.println(templates.getKey());
                
                for(Map.Entry<String,String> dev:templates.getValue().getCriteria().entrySet()){
                    writer.println(dev.getKey()+":"+dev.getValue());
                } 
            }
            
            writer.close();
            
        }catch(Exception e){
            System.out.println("error");
            
        }
        
    }
    
    private boolean isInteger(String string){
        try{
            Integer.parseInt(string);
        }catch(Exception e){
            return false;
        }
        
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel areaTempLabel;
    private javax.swing.JButton assCriteriaAddButton;
    private javax.swing.JButton assCriteriaDelButton;
    private javax.swing.JTextField assTempNameField;
    private javax.swing.JLabel assignedCriteriaLabel;
    private java.awt.List assignedCriteriaList;
    private javax.swing.JButton createTempButton;
    private javax.swing.JButton deleteTempButton;
    private javax.swing.JButton editApplyButton;
    private javax.swing.JButton editTempButton;
    private javax.swing.JLabel existingListLabel;
    private java.awt.List existingTempList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
